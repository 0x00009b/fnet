"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = foundReducer;

var _ActionTypes = _interopRequireDefault(require("./ActionTypes"));

function foundReducer(state, action) {
  if (state === void 0) {
    state = null;
  }

  var type = action.type,
      payload = action.payload;

  switch (type) {
    case _ActionTypes["default"].UPDATE_MATCH:
      // For the initial match, set resolvedMatch too. There's no previous
      // result to keep rendered, plus this simplifies server rendering.
      return {
        match: payload,
        resolvedMatch: state ? state.resolvedMatch : payload
      };

    case _ActionTypes["default"].RESOLVE_MATCH:
      // It doesn't make sense to resolve a match if there wasn't already an
      // unresolved match.
      return state && {
        match: state.match,
        resolvedMatch: payload
      };

    default:
      return state;
  }
}

module.exports = exports.default;