"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = createElements;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _ResolverUtils = require("./ResolverUtils");

function createElements(routeMatches, Components, matchData) {
  return (0, _map["default"])(routeMatches).call(routeMatches, function (match, i) {
    var router = match.router,
        route = match.route;
    var Component = Components[i];
    var data = matchData[i];
    var isComponentResolved = (0, _ResolverUtils.isResolved)(Component);
    var areDataResolved = (0, _ResolverUtils.isResolved)(data);

    if (route.render) {
      // Perhaps undefined here would be more correct for "not ready", but
      // Relay uses null in RelayReadyStateRenderer, so let's follow that
      // convention.
      return route.render({
        match: match,
        Component: isComponentResolved ? Component : null,
        props: areDataResolved ? {
          match: match,
          router: router,
          data: data
        } : null,
        data: areDataResolved ? data : null
      });
    }

    if (!isComponentResolved || !areDataResolved) {
      // Can't render.
      return undefined;
    }

    if (!Component) {
      // Note this check would be wrong on potentially unresolved data.
      process.env.NODE_ENV !== "production" ? (0, _warning["default"])(data === undefined, 'Route %s with data has no render method or component.', i) : void 0; // Nothing to render.

      return null;
    }

    return /*#__PURE__*/_react["default"].createElement(Component, {
      match: match,
      router: router,
      data: data
    });
  });
}

module.exports = exports.default;