"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = makeRouteConfig;

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _getPrototypeOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-prototype-of"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutPropertiesLoose"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireDefault(require("react"));

function buildRouteConfig(node, routeConfig) {
  var _context;

  (0, _forEach["default"])(_context = _react["default"].Children).call(_context, node, function (child) {
    // Falsy children get coerced to null. We check for this instead of
    // implicit falsiness because we don't want to allow empty strings or 0.
    if (child === null) {
      return;
    }

    ! /*#__PURE__*/_react["default"].isValidElement(child) ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, '`%s` is not a valid React element', child) : invariant(false) : void 0;
    var Type = child.type;
    var _child$props = child.props,
        children = _child$props.children,
        props = (0, _objectWithoutPropertiesLoose2["default"])(_child$props, ["children"]);

    if (Type === _react["default"].Fragment) {
      buildRouteConfig(children, routeConfig);
      return;
    }

    if (process.env.NODE_ENV !== "production") {
      if (Type.prototype.constructor !== Type) {
        // Unwrap proxies from react-proxy. This isn't strictly necessary.
        // eslint-disable-next-line no-param-reassign
        Type = Type.prototype.constructor;
      } else if ( // eslint-disable-next-line no-underscore-dangle
      Type.__reactstandin__getCurrent) {
        // Unwrap proxies from react-stand-in.
        // eslint-disable-next-line no-param-reassign
        Type = (0, _getPrototypeOf["default"])(Type);
      }
    }

    var route = new Type(props);

    if (children) {
      if ( /*#__PURE__*/_react["default"].isValidElement(children) || (0, _isArray["default"])(children)) {
        // eslint-disable-next-line no-use-before-define
        route.children = makeRouteConfig(children);
      } else {
        var _context2;

        var routeGroups = {};
        (0, _forEach["default"])(_context2 = (0, _entries["default"])(children)).call(_context2, function (_ref) {
          var groupName = _ref[0],
              groupRoutes = _ref[1];
          // eslint-disable-next-line no-use-before-define
          routeGroups[groupName] = makeRouteConfig(groupRoutes);
        });
        route.children = routeGroups;
      }
    }

    routeConfig.push(route);
  });
  return routeConfig;
}
/**
 * Create a route configuration from JSX configuration elements.
 */


function makeRouteConfig(node) {
  return buildRouteConfig(node, []);
}

module.exports = exports.default;