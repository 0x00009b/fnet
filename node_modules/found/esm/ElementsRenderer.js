import _reduceRightInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce-right";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import PropTypes from 'prop-types';
import React from 'react';
var propTypes = {
  elements: PropTypes.arrayOf(PropTypes.oneOfType([// This should be an object of this same type, but recursive checks would
  // probably be too messy.
  PropTypes.object, PropTypes.element, PropTypes.func])).isRequired
};

function accumulateElement(children, element) {
  if (!children) {
    return typeof element === 'function' ? element(null) : element;
  }

  if (!element) {
    return children;
  }

  if (! /*#__PURE__*/React.isValidElement(children)) {
    var _context;

    // Children come from named child routes.
    var groups = {};

    _forEachInstanceProperty(_context = _Object$entries(children)).call(_context, function (_ref) {
      var groupName = _ref[0],
          groupElements = _ref[1];
      groups[groupName] = _reduceRightInstanceProperty(groupElements).call(groupElements, accumulateElement, null);
    });

    return typeof element === 'function' ? element(groups) : /*#__PURE__*/React.cloneElement(element, groups);
  }

  return typeof element === 'function' ? element(children) : /*#__PURE__*/React.cloneElement(element, {
    children: children
  });
}

function ElementsRenderer(_ref2) {
  var elements = _ref2.elements;
  return _reduceRightInstanceProperty(elements).call(elements, accumulateElement, null);
}

ElementsRenderer.propTypes = propTypes;
export default ElementsRenderer;