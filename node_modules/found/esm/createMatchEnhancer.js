import _extends from "@babel/runtime-corejs3/helpers/esm/extends";
import FarceActionTypes from 'farce/ActionTypes';
import { applyMiddleware } from 'redux';
import ActionTypes from './ActionTypes';

function createMatchMiddleware(matcher) {
  return function matchMiddleware() {
    return function (next) {
      return function (action) {
        var type = action.type,
            payload = action.payload;

        if (type !== FarceActionTypes.UPDATE_LOCATION) {
          return next(action);
        }

        return next({
          type: ActionTypes.UPDATE_MATCH,
          payload: _extends({
            location: payload
          }, matcher.match(payload))
        });
      };
    };
  };
}

export default function createMatchEnhancer(matcher, getFound) {
  if (getFound === void 0) {
    getFound = function getFound(_ref) {
      var found = _ref.found;
      return found;
    };
  }

  return function matchEnhancer(createStore) {
    return function () {
      var middlewareEnhancer = applyMiddleware(createMatchMiddleware(matcher));
      var store = middlewareEnhancer(createStore).apply(void 0, arguments);

      function replaceRouteConfig(routeConfig) {
        matcher.replaceRouteConfig(routeConfig);
        store.dispatch({
          type: FarceActionTypes.UPDATE_LOCATION,
          payload: getFound(store.getState()).match.location
        });
      }

      return _extends({}, store, {
        found: {
          matcher: matcher,
          replaceRouteConfig: replaceRouteConfig
        }
      });
    };
  };
}