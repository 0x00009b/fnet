import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _extends from "@babel/runtime-corejs3/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime-corejs3/helpers/esm/objectWithoutPropertiesLoose";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/esm/asyncToGenerator";
import createFarceRouter from './createFarceRouter';
import createFarceStore from './createFarceStore';
import getStoreRenderArgs from './getStoreRenderArgs';
export default function createInitialFarceRouter(_x) {
  return _createInitialFarceRouter.apply(this, arguments);
}

function _createInitialFarceRouter() {
  _createInitialFarceRouter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var historyProtocol, historyMiddlewares, historyOptions, routeConfig, matchContext, resolver, options, store, FarceRouter, initialRenderArgs;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            historyProtocol = _ref.historyProtocol, historyMiddlewares = _ref.historyMiddlewares, historyOptions = _ref.historyOptions, routeConfig = _ref.routeConfig, matchContext = _ref.matchContext, resolver = _ref.resolver, options = _objectWithoutPropertiesLoose(_ref, ["historyProtocol", "historyMiddlewares", "historyOptions", "routeConfig", "matchContext", "resolver"]);
            store = createFarceStore({
              historyProtocol: historyProtocol,
              historyMiddlewares: historyMiddlewares,
              historyOptions: historyOptions,
              routeConfig: routeConfig
            });
            FarceRouter = createFarceRouter(_extends({}, options, {
              store: store
            })); // This intentionally doesn't handle RedirectExceptions, because those
            // shouldn't happen here anyway.

            _context.next = 5;
            return getStoreRenderArgs({
              store: store,
              matchContext: matchContext,
              resolver: resolver
            });

          case 5:
            initialRenderArgs = _context.sent;
            // We own this FarceRouter, so it's safe to replace its default props.
            FarceRouter.defaultProps = _extends({}, FarceRouter.defaultProps, {
              matchContext: matchContext,
              resolver: resolver,
              initialRenderArgs: initialRenderArgs
            });
            return _context.abrupt("return", FarceRouter);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createInitialFarceRouter.apply(this, arguments);
}