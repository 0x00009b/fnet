import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _extends from "@babel/runtime-corejs3/helpers/esm/extends";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$values from "@babel/runtime-corejs3/core-js-stable/object/values";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _setImmediate from "@babel/runtime-corejs3/core-js-stable/set-immediate";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var _context5; var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = _getIterator(o); return _bindInstanceProperty(_context5 = it.next).call(_context5, it); }

function _unsupportedIterableToArray(o, minLen) { var _context4; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import isPromise from 'is-promise';
import warning from 'warning';
var UNRESOLVED = {};
export function checkResolved(value) {
  if (!isPromise(value)) {
    return value;
  }

  return _Promise.race([value, new _Promise(function (resolve) {
    _setImmediate(resolve, UNRESOLVED);
  })]);
}
export function isResolved(value) {
  return value !== UNRESOLVED;
}

function accumulateRouteValuesImpl(routeValues, routeIndices, callback, initialValue) {
  var accumulated = [];
  var value = initialValue;

  for (var _iterator = _createForOfIteratorHelperLoose(routeIndices), _step; !(_step = _iterator()).done;) {
    var routeIndex = _step.value;

    if (typeof routeIndex === 'object') {
      var _context;

      // eslint-disable-next-line no-loop-func
      _forEachInstanceProperty(_context = _Object$values(routeIndex)).call(_context, function (groupRouteIndices) {
        accumulated.push.apply(accumulated, accumulateRouteValuesImpl(routeValues, groupRouteIndices, callback, value));
      });
    } else {
      value = callback(value, routeValues.shift());
      accumulated.push(value);
    }
  }

  return accumulated;
}

export function accumulateRouteValues(routeValues, routeIndices, callback, initialValue) {
  var _context2;

  return accumulateRouteValuesImpl(_concatInstanceProperty(_context2 = []).call(_context2, routeValues), routeIndices, callback, initialValue);
}
export function getRouteMatches(match) {
  var _context3;

  return _mapInstanceProperty(_context3 = match.routes).call(_context3, function (route, i) {
    return _extends({}, match, {
      route: route,
      routeParams: match.routeParams[i]
    });
  });
}
export function getRouteValue(match, getGetter, getValue) {
  var route = match.route;
  var getter = getGetter(route);
  return getter ? getter.call(route, match) : getValue(route);
} // This is a little more versatile than if we only passed in keys.

export function getRouteValues(routeMatches, getGetter, getValue) {
  return _mapInstanceProperty(routeMatches).call(routeMatches, function (match) {
    return getRouteValue(match, getGetter, getValue);
  });
}

function getRouteGetComponent(route) {
  return route.getComponent;
}

function getRouteComponent(route) {
  if (process.env.NODE_ENV !== "production" && route.component) {
    process.env.NODE_ENV !== "production" ? warning(route.Component, 'Route with `component` property `%s` has no `Component` property. The expected property for the route component is `Component`.', route.component.displayName || route.component.name) : void 0;
  }

  return route.Component;
} // This should be common to most resolvers, so make it available here.


export function getComponents(routeMatches) {
  return getRouteValues(routeMatches, getRouteGetComponent, getRouteComponent);
}