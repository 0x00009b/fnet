import _extends from "@babel/runtime-corejs3/helpers/esm/extends";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _objectWithoutPropertiesLoose from "@babel/runtime-corejs3/helpers/esm/objectWithoutPropertiesLoose";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _inheritsLoose from "@babel/runtime-corejs3/helpers/esm/inheritsLoose";
import PropTypes from 'prop-types';
import React from 'react';
import warning from 'warning';
import { routerShape } from './PropTypes';
var propTypes = {
  as: PropTypes.elementType.isRequired,
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
  match: PropTypes.object.isRequired,
  activeClassName: PropTypes.string,
  activeStyle: PropTypes.object,
  activePropName: PropTypes.string,
  router: routerShape.isRequired,
  exact: PropTypes.bool.isRequired,
  target: PropTypes.string,
  onClick: PropTypes.func,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
};
var defaultProps = {
  as: 'a',
  exact: false
};

var BaseLink = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(BaseLink, _React$Component);

  function BaseLink() {
    var _context;

    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, _concatInstanceProperty(_context = [this]).call(_context, args)) || this;

    _this.onClick = function (event) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          target = _this$props.target,
          router = _this$props.router,
          to = _this$props.to;

      if (onClick) {
        onClick(event);
      } // Don't do anything if the user's onClick handler prevented default.
      // Otherwise, let the browser handle the link with the computed href if the
      // event wasn't an unmodified left click, or if the link has a target other
      // than _self.


      if (event.defaultPrevented || event.metaKey || event.altKey || event.ctrlKey || event.shiftKey || event.button !== 0 || target && target !== '_self') {
        return;
      }

      event.preventDefault(); // FIXME: When clicking on a link to the same location in the browser, the
      // actual becomes a replace rather than a push. We may want the same
      // handling â€“ perhaps implemented in the Farce protocol.

      router.push(to);
    };

    return _this;
  }

  var _proto = BaseLink.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        Component = _this$props2.as,
        to = _this$props2.to,
        match = _this$props2.match,
        activeClassName = _this$props2.activeClassName,
        activeStyle = _this$props2.activeStyle,
        activePropName = _this$props2.activePropName,
        router = _this$props2.router,
        exact = _this$props2.exact,
        props = _objectWithoutPropertiesLoose(_this$props2, ["as", "to", "match", "activeClassName", "activeStyle", "activePropName", "router", "exact"]);

    if (process.env.NODE_ENV !== "production" && typeof Component !== 'function') {
      for (var _i = 0, _arr = ['component', 'Component']; _i < _arr.length; _i++) {
        var wrongPropName = _arr[_i];
        var wrongPropValue = props[wrongPropName];

        if (!wrongPropValue) {
          continue;
        }

        process.env.NODE_ENV !== "production" ? warning(false, 'Link to %s with `%s` prop `%s` has an element type that is not a component. The expected prop for the link component is `as`.', _JSON$stringify(to), wrongPropName, wrongPropValue.displayName || wrongPropValue.name || 'UNKNOWN') : void 0;
      }
    }

    var href = router.createHref(to);
    var childrenIsFunction = typeof props.children === 'function';

    if (childrenIsFunction || activeClassName || activeStyle || activePropName) {
      var toLocation = router.createLocation(to);
      var active = router.isActive(match, toLocation, {
        exact: exact
      });

      if (childrenIsFunction) {
        return props.children({
          href: href,
          active: active,
          onClick: this.onClick
        });
      }

      if (active) {
        if (activeClassName) {
          props.className = props.className ? props.className + " " + activeClassName : activeClassName;
        }

        if (activeStyle) {
          props.style = _extends({}, props.style, activeStyle);
        }
      }

      if (activePropName) {
        props[activePropName] = active;
      }
    }

    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
      href: href,
      onClick: this.onClick // This overrides props.onClick.

    }));
  };

  return BaseLink;
}(React.Component);

BaseLink.propTypes = propTypes;
BaseLink.defaultProps = defaultProps;
export default BaseLink;