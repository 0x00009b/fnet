import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Object$getPrototypeOf from "@babel/runtime-corejs3/core-js-stable/object/get-prototype-of";
import _objectWithoutPropertiesLoose from "@babel/runtime-corejs3/helpers/esm/objectWithoutPropertiesLoose";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import invariant from 'invariant';
import React from 'react';

function buildRouteConfig(node, routeConfig) {
  var _context;

  _forEachInstanceProperty(_context = React.Children).call(_context, node, function (child) {
    // Falsy children get coerced to null. We check for this instead of
    // implicit falsiness because we don't want to allow empty strings or 0.
    if (child === null) {
      return;
    }

    ! /*#__PURE__*/React.isValidElement(child) ? process.env.NODE_ENV !== "production" ? invariant(false, '`%s` is not a valid React element', child) : invariant(false) : void 0;
    var Type = child.type;

    var _child$props = child.props,
        children = _child$props.children,
        props = _objectWithoutPropertiesLoose(_child$props, ["children"]);

    if (Type === React.Fragment) {
      buildRouteConfig(children, routeConfig);
      return;
    }

    if (process.env.NODE_ENV !== "production") {
      if (Type.prototype.constructor !== Type) {
        // Unwrap proxies from react-proxy. This isn't strictly necessary.
        // eslint-disable-next-line no-param-reassign
        Type = Type.prototype.constructor;
      } else if ( // eslint-disable-next-line no-underscore-dangle
      Type.__reactstandin__getCurrent) {
        // Unwrap proxies from react-stand-in.
        // eslint-disable-next-line no-param-reassign
        Type = _Object$getPrototypeOf(Type);
      }
    }

    var route = new Type(props);

    if (children) {
      if ( /*#__PURE__*/React.isValidElement(children) || _Array$isArray(children)) {
        // eslint-disable-next-line no-use-before-define
        route.children = makeRouteConfig(children);
      } else {
        var _context2;

        var routeGroups = {};

        _forEachInstanceProperty(_context2 = _Object$entries(children)).call(_context2, function (_ref) {
          var groupName = _ref[0],
              groupRoutes = _ref[1];
          // eslint-disable-next-line no-use-before-define
          routeGroups[groupName] = makeRouteConfig(groupRoutes);
        });

        route.children = routeGroups;
      }
    }

    routeConfig.push(route);
  });

  return routeConfig;
}
/**
 * Create a route configuration from JSX configuration elements.
 */


export default function makeRouteConfig(node) {
  return buildRouteConfig(node, []);
}