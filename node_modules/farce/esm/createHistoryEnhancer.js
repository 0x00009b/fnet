function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { applyMiddleware, bindActionCreators } from 'redux';
import ActionTypes from './ActionTypes';
import createHistoryMiddleware from './createHistoryMiddleware';
import createNavigationListenerMiddleware from './createNavigationListenerMiddleware';
import ensureLocationMiddleware from './ensureLocationMiddleware';

function createHref(location) {
  return {
    type: ActionTypes.CREATE_HREF,
    payload: location
  };
}

function createLocation(location) {
  return {
    type: ActionTypes.CREATE_LOCATION,
    payload: location
  };
}

export default function createHistoryEnhancer(_ref) {
  var protocol = _ref.protocol,
      _ref$middlewares = _ref.middlewares,
      middlewares = _ref$middlewares === void 0 ? [] : _ref$middlewares;
  return function historyEnhancer(createStore) {
    return function () {
      var navigationListenerMiddleware = createNavigationListenerMiddleware();
      var middlewareEnhancer = applyMiddleware.apply(void 0, [ensureLocationMiddleware, navigationListenerMiddleware].concat(middlewares, [createHistoryMiddleware(protocol)], [].concat(middlewares).reverse(), [navigationListenerMiddleware]));
      var store = middlewareEnhancer(createStore).apply(void 0, arguments);
      var boundActionCreators = bindActionCreators({
        createHref: createHref,
        createLocation: createLocation
      }, store.dispatch);
      return _extends({}, store, {
        farce: _extends({}, boundActionCreators, {
          addNavigationListener: navigationListenerMiddleware.addListener
        })
      });
    };
  };
}