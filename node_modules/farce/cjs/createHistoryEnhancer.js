"use strict";

exports.__esModule = true;
exports["default"] = createHistoryEnhancer;

var _redux = require("redux");

var _ActionTypes = _interopRequireDefault(require("./ActionTypes"));

var _createHistoryMiddleware = _interopRequireDefault(require("./createHistoryMiddleware"));

var _createNavigationListenerMiddleware = _interopRequireDefault(require("./createNavigationListenerMiddleware"));

var _ensureLocationMiddleware = _interopRequireDefault(require("./ensureLocationMiddleware"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function createHref(location) {
  return {
    type: _ActionTypes["default"].CREATE_HREF,
    payload: location
  };
}

function createLocation(location) {
  return {
    type: _ActionTypes["default"].CREATE_LOCATION,
    payload: location
  };
}

function createHistoryEnhancer(_ref) {
  var protocol = _ref.protocol,
      _ref$middlewares = _ref.middlewares,
      middlewares = _ref$middlewares === void 0 ? [] : _ref$middlewares;
  return function historyEnhancer(createStore) {
    return function () {
      var navigationListenerMiddleware = (0, _createNavigationListenerMiddleware["default"])();

      var middlewareEnhancer = _redux.applyMiddleware.apply(void 0, [_ensureLocationMiddleware["default"], navigationListenerMiddleware].concat(middlewares, [(0, _createHistoryMiddleware["default"])(protocol)], [].concat(middlewares).reverse(), [navigationListenerMiddleware]));

      var store = middlewareEnhancer(createStore).apply(void 0, arguments);
      var boundActionCreators = (0, _redux.bindActionCreators)({
        createHref: createHref,
        createLocation: createLocation
      }, store.dispatch);
      return _extends({}, store, {
        farce: _extends({}, boundActionCreators, {
          addNavigationListener: navigationListenerMiddleware.addListener
        })
      });
    };
  };
}

module.exports = exports.default;